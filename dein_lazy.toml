[[plugins]]
	repo = 'Shougo/unite.vim'
	hook_add = '''
		let g:unite_source_history_yank_enable = 1

		nnoremap sh :<C-u>Unite history/yank<CR>
		nnoremap su :<C-u>Unite file_mru file buffer<CR>
		nnoremap sf :<C-u>Unite -buffer-name=files file_rec<CR>
		nnoremap sc :<C-u>UniteWithCurrentDir file<CR>
		nnoremap sm :<C-u>Unite change -winheight=15 -no-quit -keep-focus<CR>
		nnoremap sv :<C-u>Unite bookmark<CR>
		nnoremap sb :<C-u>Unite buffer<CR>
		nnoremap so :<C-u>Unite outline -winheight=15 -no-quit<CR>
		nnoremap sl :<C-u>Unite line -winheight=15 -no-quit -input=
		nnoremap sL :<C-u>Unite line -winheight=15 -no-quit -input=<C-R><C-W><CR>
		nnoremap sj :<C-u>Unite -winheight=15 -no-quit jump<CR>
		nnoremap sd :<C-u>UniteClose default<CR>
		nnoremap sr :<C-u>UniteResume<CR>
		nnoremap st :<C-u>Unite tag -start-insert<CR>
		nnoremap sG :<C-u>Unite gtags/context -no-quit -winwidth=10<CR>
		nnoremap sR :<C-u>Unite gtags/grep -no-quit -winwidth=10 -input=<C-R><C-W><CR>
		" nnoremap sp :<C-u>call <SID>unite_project('-start-insert')<CR>
		nnoremap sp :<C-u>UniteWithProjectDir file_rec<CR>
		nnoremap mm :<C-u>Unite mark<CR>
		nnoremap md :<C-u>delmarks!<CR>

		let g:unite_source_grep_max_candidates = 6000
		if executable('ag')
	  " Use ag in unite grep source.
			let g:unite_source_grep_command = 'ag'
			 let g:unite_source_grep_default_opts =
			 \ '-i --line-numbers --nocolor --nogroup --hidden --ignore ''.git'' '
			 let g:unite_source_grep_recursive_opt = ''
		endif
		" grep within a git project
		nnoremap sg :<C-u>call <SID>unite_project_grep()<CR>
		function! s:unite_project_grep(...)
		  let opts = (a:0 ? join(a:000, ' ') : '')
		  let dir  = unite#util#path2project_directory(expand('%'))
		  execute 'Unite' opts 'grep:' . dir
		endfunction

		" open by split window holizontaly
		au FileType unite nnoremap <silent> <buffer> <expr> S unite#do_action('split')
		au FileType unite inoremap <silent> <buffer> <expr> S unite#do_action('split')
		" open by splitting window vertically
		au FileType unite nnoremap <silent> <buffer> <expr> V unite#do_action('vsplit')
		au FileType unite inoremap <silent> <buffer> <expr> V unite#do_action('vsplit')
		" exit with double ESC key
		au FileType unite nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
		au FileType unite inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
	'''

[[plugins]]
	repo = 'Shougo/unite-session'
	on_source = ['unite.vim']

[[plugins]]
	repo = 'Shougo/unite-outline'
	on_source = ['unite.vim']

[[plugins]]
	repo = 'Shougo/neomru.vim'
	on_source = ['unite.vim']

[[plugins]]
	repo = 'ujihisa/unite-colorscheme'
	on_source = ['unite.vim']

[[plugins]]
	repo = 'ujihisa/unite-font'
	on_source = ['unite.vim']

[[plugins]]
	repo = 'tsukkee/unite-tag'
	on_source = ['unite.vim']

[[plugins]]
	repo = 'hewes/unite-gtags'
	on_source = ['unite.vim']
	hook_add = '''
		let g:unite_source_gtags_project_config = {
					\ '_' : { 'treelize':1, 'absolute_path':1,
					\        'gtags_libpath': ['/usr/local/bin/']}
					\	}
	'''

[[plugins]]
	repo = 'Shougo/vimfiler'
	hook_add = '''
		nnoremap ,vf :VimFiler<CR>
		let g:vimfiler_as_default_explorer=1
		let g:vimfiler_safe_mode_by_default=0
		nnoremap ]v :VimFilerBufferDir -split -simple -winwidth=30 -no-quit<CR>

		au FileType vimfiler nnoremap <silent><buffer><expr> vv vimfiler#do_switch_action('vsplit')
		au FileType vimfiler nnoremap <silent><buffer><expr> ss vimfiler#do_switch_action('split')
		
		" exit by double ESC key
		au FileType vimfiler nnoremap <silent> <buffer> <ESC><ESC> :q<CR>
		au FileType vimfiler inoremap <silent> <buffer> <ESC><ESC> <ESC>:q<CR>
		au FileType vimfiler nnoremap <silent> <buffer> <C-l> <C-w>l
	'''

[[plugins]]
	repo = 'fuenor/JpFormat.vim'
	on_i = 1
	hook_add = '''
		let JpCountChars = 40
		let JpCountLines = 40
		" 日本語の行の連結時には空白を入力しない。
		set formatoptions+=mM
	'''

[[plugins]]
	repo = 'thinca/vim-quickrun'
	hook_add = '''
		let g:quickrun_config = {'*': {'20vsplit': ''}}
		let g:quickrun_config = {'*': {'hook/time/enable': '1'},}
		nnoremap ,r :QuickRun<CR> 

		"tex
		let g:tex_flavor='latex' 
		let g:quickrun_config = { 'tex' : {'command' : 'platex', 'exec': ['%c %s', 'dvipdfmx %s:r.dvi', 'open %s:r.pdf']} }
		
		"html
		" let g:quickrun_config = { 'html' : {'command' : '', 'exec': ['open %s']} }
		
		"markdown
		let g:quickrun_config['markdown'] = {
		       \ 'outputter': 'browser'
		       \ }
	'''

[[plugins]]
	repo = 'thinca/vim-ref'
	hook_add = '''
		" use lynx for alc
		let g:ref_alc_cmd='lynx -dump -nonumbers -display_charset=utf-8 %s'
		" add web dictionary
		let g:ref_source_webdict_sites = {
		\ 'wiktionary': {
		\ 'url': 'http://ja.wiktionary.org/wiki/%s',
		\ 'keyword_encoding': 'utf-8',
		\ 'cache': 1,
		\ },
		\ 'wikipedia:ja':{
		\ 'url': 'http://ja.wikipedia.org/wiki/%s',
		\ 'keyword_encoding': 'utf-8',
		\ 'cache': 1,
		\ },
		\ 'alc':{
		\ 'url': 'http://eow.alc.co.jp/search?q=%s',
		\ 'keyword_encoding': 'utf-8',
		\ 'cache': 1,
		\ },
		\ }
		" output filter (remove first several lines)
		function! g:ref_source_webdict_sites.wiktionary.filter(output)
		 return join(split(a:output, "\n")[18 :], "\n")
		endfunction
		function! g:ref_source_webdict_sites.alc.filter(output)
		 return join(split(a:output, "\n")[34 :], "\n")
		endfunction
		let g:ref_source_webdict_sites.default = 'wikipedia:ja'
		nnoremap ,a :Ref webdict alc 
	'''

[[plugins]]
	repo = 'Shougo/neocomplete.vim'
	hook_add = '''
    let g:neocomplete#enable_at_startup = 1
    let g:neocomplete#enable_ignore_case = 1
    let g:neocomplete#enable_smart_case = 1
    if !exists('g:neocomplete#keyword_patterns')
        let g:neocomplete#keyword_patterns = {}
    endif
    let g:neocomplete#keyword_patterns._ = '\h\w*'

		inoremap <expr><TAB> pumvisible() ? "\<C-n>" : "\<TAB>"
		inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<S-TAB>"
	'''

[[plugins]]
	repo = 'Shougo/neosnippet'
	hook_add = '''
		imap <C-k>     <Plug>(neosnippet_expand_or_jump)
		smap <C-k>     <Plug>(neosnippet_expand_or_jump)
		xmap <C-k>     <Plug>(neosnippet_expand_target)

		" SuperTab like snippets behavior.
		imap <expr><TAB> neosnippet#expandable_or_jumpable() ?
		\ "\<Plug>(neosnippet_expand_or_jump)"
		\: pumvisible() ? "\<C-n>" : "\<TAB>"
		smap <expr><TAB> neosnippet#expandable_or_jumpable() ?
		\ "\<Plug>(neosnippet_expand_or_jump)"
		\: "\<TAB>"
		
		" For snippet_complete marker.
		if has('conceal')
		  set conceallevel=2 concealcursor=i
		endif
	'''

[[plugins]]
	repo = 'Shougo/neosnippet-snippets'

[[plugins]]
	repo = 'vim-scripts/Align'
	hook_add = '''
		let g:Align_xstrlen=3
		let g:DrChipTopLvlMenu = ''
	'''

[[plugins]]
	repo = 'vim-scripts/gtags.vim'

[[plugins]]
	repo = 'tpope/vim-fugitive'
